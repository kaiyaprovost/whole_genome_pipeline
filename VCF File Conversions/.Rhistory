c(-1, 0) * grepl("l", tl.pos)
ylim <- c(n1 - 0.5 - nn * cl.ratio * (cl.pos == "b") -
laboffset, n2 + 0.5 + laboffset + ylabwidth *
abs(sin(tl.srt * pi/180)) * grepl("t", tl.pos)) +
c(-0.15, 0) + c(0, -1) * (type == "upper" &&
tl.pos != "n") + c(0, 1) * grepl("d", tl.pos)
plot.window(xlim, ylim, asp = 1, xaxs = "i", yaxs = "i")
x.tmp <- max(strwidth(newrownames, cex = tl.cex))
y.tmp <- max(strwidth(newcolnames, cex = tl.cex))
laboffset.tmp <- strwidth("W", cex = tl.cex) * tl.offset
if (max(x.tmp - xlabwidth, y.tmp - ylabwidth, laboffset.tmp -
laboffset) < 0.001) {
break
}
xlabwidth <- x.tmp
ylabwidth <- y.tmp
laboffset <- laboffset.tmp
if (i == 50) {
warning(c("Not been able to calculate text margin, ",
"please try again with a clean new empty window using ",
"{plot.new(); dev.off()} or reduce tl.cex"))
}
}
if (.Platform$OS.type == "windows") {
grDevices::windows.options(width = 7, height = 7 *
diff(ylim)/diff(xlim))
}
plot.window(xlim = xlim, ylim = ylim, asp = win.asp,
xlab = "", ylab = "", xaxs = "i", yaxs = "i")
}
laboffset <- strwidth("W", cex = tl.cex) * tl.offset
symbols(Pos, add = TRUE, inches = FALSE, rectangles = matrix(1,
len.DAT, 2), bg = bg, fg = bg)
if (method == "circle" && plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, circles = asp_rescale_factor *
0.9 * abs(DAT)^0.5/2, fg = col.border, bg = col.fill)
}
if (method == "ellipse" && plotCI == "n") {
ell.dat <- function(rho, length = 99) {
k <- seq(0, 2 * pi, length = length)
x <- cos(k + acos(rho)/2)/2
y <- cos(k - acos(rho)/2)/2
cbind(rbind(x, y), c(NA, NA))
}
ELL.dat <- lapply(DAT, ell.dat)
ELL.dat2 <- 0.85 * matrix(unlist(ELL.dat), ncol = 2,
byrow = TRUE)
ELL.dat2 <- ELL.dat2 + Pos[rep(1:length(DAT), each = 100),
]
polygon(ELL.dat2, border = col.border, col = col.fill)
}
if (is.null(number.digits)) {
number.digits <- switch(addCoefasPercent + 1, 2, 0)
}
stopifnot(number.digits%%1 == 0)
stopifnot(number.digits >= 0)
if (method == "number" && plotCI == "n") {
text(Pos[, 1], Pos[, 2], font = number.font, col = col.fill,
labels = round((DAT - int) * ifelse(addCoefasPercent,
100, 1)/zoom, number.digits), cex = number.cex)
}
NA_LABEL_MAX_CHARS <- 2
if (is.matrix(PosNA) && nrow(PosNA) > 0) {
stopifnot(is.matrix(PosNA))
if (na.label == "square") {
symbols(PosNA, add = TRUE, inches = FALSE, squares = rep(1,
nrow(PosNA)), bg = na.label.col, fg = na.label.col)
}
else if (nchar(na.label) %in% 0:NA_LABEL_MAX_CHARS) {
symbols(PosNA, add = TRUE, inches = FALSE, squares = rep(1,
nrow(PosNA)), fg = bg, bg = bg)
text(PosNA[, 1], PosNA[, 2], font = number.font,
col = na.label.col, labels = na.label, cex = number.cex,
...)
}
else {
stop(paste("Maximum number of characters for NA label is:",
NA_LABEL_MAX_CHARS))
}
}
if (method == "pie" && plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, circles = rep(0.5,
len.DAT) * 0.85, fg = col.border)
pie.dat <- function(theta, length = 100) {
k <- seq(pi/2, pi/2 - theta, length = 0.5 * length *
abs(theta)/pi)
x <- c(0, cos(k)/2, 0)
y <- c(0, sin(k)/2, 0)
cbind(rbind(x, y), c(NA, NA))
}
PIE.dat <- lapply(DAT * 2 * pi, pie.dat)
len.pie <- unlist(lapply(PIE.dat, length))/2
PIE.dat2 <- 0.85 * matrix(unlist(PIE.dat), ncol = 2,
byrow = TRUE)
PIE.dat2 <- PIE.dat2 + Pos[rep(1:length(DAT), len.pie),
]
polygon(PIE.dat2, border = "black", col = col.fill)
}
if (method == "shade" && plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, squares = rep(1,
len.DAT), bg = col.fill, fg = addgrid.col)
shade.dat <- function(w) {
x <- w[1]
y <- w[2]
rho <- w[3]
x1 <- x - 0.5
x2 <- x + 0.5
y1 <- y - 0.5
y2 <- y + 0.5
dat <- NA
if ((addshade == "positive" || addshade == "all") &&
rho > 0) {
dat <- cbind(c(x1, x1, x), c(y, y1, y1), c(x,
x2, x2), c(y2, y2, y))
}
if ((addshade == "negative" || addshade == "all") &&
rho < 0) {
dat <- cbind(c(x1, x1, x), c(y, y2, y2), c(x,
x2, x2), c(y1, y1, y))
}
return(t(dat))
}
pos_corr <- rbind(cbind(Pos, DAT))
pos_corr2 <- split(pos_corr, 1:nrow(pos_corr))
SHADE.dat <- matrix(na.omit(unlist(lapply(pos_corr2,
shade.dat))), byrow = TRUE, ncol = 4)
segments(SHADE.dat[, 1], SHADE.dat[, 2], SHADE.dat[,
3], SHADE.dat[, 4], col = shade.col, lwd = shade.lwd)
}
if (method == "square" && plotCI == "n") {
draw_method_square(Pos, DAT, asp_rescale_factor, col.border,
col.fill)
}
if (method == "color" && plotCI == "n") {
draw_method_color(Pos, col.border, col.fill)
}
draw_grid(AllCoords, addgrid.col)
if (plotCI != "n") {
if (is.null(lowCI.mat) || is.null(uppCI.mat)) {
stop("Need lowCI.mat and uppCI.mat!")
}
if (order != "original") {
lowCI.mat <- lowCI.mat[ord, ord]
uppCI.mat <- uppCI.mat[ord, ord]
}
pos.lowNew <- getPos.Dat(lowCI.mat)[[1]]
lowNew <- getPos.Dat(lowCI.mat)[[2]]
pos.uppNew <- getPos.Dat(uppCI.mat)[[1]]
uppNew <- getPos.Dat(uppCI.mat)[[2]]
if (!method %in% c("circle", "square")) {
stop("Method shoud be circle or square if drawing confidence intervals.")
}
k1 <- (abs(uppNew) > abs(lowNew))
bigabs <- uppNew
bigabs[which(!k1)] <- lowNew[!k1]
smallabs <- lowNew
smallabs[which(!k1)] <- uppNew[!k1]
sig <- sign(uppNew * lowNew)
color_bigabs <- col[ceiling((bigabs + 1) * length(col)/2)]
color_smallabs <- col[ceiling((smallabs + 1) * length(col)/2)]
if (plotCI == "circle") {
symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE,
inches = FALSE, circles = 0.95 * abs(bigabs)^0.5/2,
bg = ifelse(sig > 0, col.fill, color_bigabs),
fg = ifelse(sig > 0, col.fill, color_bigabs))
symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE,
inches = FALSE, circles = 0.95 * abs(smallabs)^0.5/2,
bg = ifelse(sig > 0, bg, color_smallabs), fg = ifelse(sig >
0, col.fill, color_smallabs))
}
if (plotCI == "square") {
symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE,
inches = FALSE, squares = abs(bigabs)^0.5, bg = ifelse(sig >
0, col.fill, color_bigabs), fg = ifelse(sig >
0, col.fill, color_bigabs))
symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE,
inches = FALSE, squares = abs(smallabs)^0.5,
bg = ifelse(sig > 0, bg, color_smallabs), fg = ifelse(sig >
0, col.fill, color_smallabs))
}
if (plotCI == "rect") {
rect.width <- 0.25
rect(pos.uppNew[, 1] - rect.width, pos.uppNew[, 2] +
smallabs/2, pos.uppNew[, 1] + rect.width, pos.uppNew[,
2] + bigabs/2, col = col.fill, border = col.fill)
segments(pos.lowNew[, 1] - rect.width, pos.lowNew[,
2] + DAT/2, pos.lowNew[, 1] + rect.width, pos.lowNew[,
2] + DAT/2, col = "black", lwd = 1)
segments(pos.uppNew[, 1] - rect.width, pos.uppNew[,
2] + uppNew/2, pos.uppNew[, 1] + rect.width,
pos.uppNew[, 2] + uppNew/2, col = "black", lwd = 1)
segments(pos.lowNew[, 1] - rect.width, pos.lowNew[,
2] + lowNew/2, pos.lowNew[, 1] + rect.width,
pos.lowNew[, 2] + lowNew/2, col = "black", lwd = 1)
segments(pos.lowNew[, 1] - 0.5, pos.lowNew[, 2],
pos.lowNew[, 1] + 0.5, pos.lowNew[, 2], col = "grey70",
lty = 3)
}
}
if (!is.null(p.mat) && insig != "n") {
if (order != "original") {
p.mat <- p.mat[ord, ord]
}
pos.pNew <- getPos.Dat(p.mat)[[1]]
pNew <- getPos.Dat(p.mat)[[2]]
if (insig == "label_sig") {
if (!is.character(pch))
pch <- "*"
place_points <- function(sig.locs, point) {
text(pos.pNew[, 1][sig.locs], pos.pNew[, 2][sig.locs],
labels = point, col = pch.col, cex = pch.cex,
lwd = 2)
}
if (length(sig.level) == 1) {
place_points(sig.locs = which(pNew < sig.level),
point = pch)
}
else {
l <- length(sig.level)
for (i in seq_along(sig.level)) {
iter <- l + 1 - i
pchTmp <- paste(rep(pch, i), collapse = "")
if (i == length(sig.level)) {
locs <- which(pNew < sig.level[iter])
if (length(locs)) {
place_points(sig.locs = locs, point = pchTmp)
}
}
else {
locs <- which(pNew < sig.level[iter] & pNew >
sig.level[iter - 1])
if (length(locs)) {
place_points(sig.locs = locs, point = pchTmp)
}
}
}
}
}
else {
ind.p <- which(pNew > sig.level)
p_inSig <- length(ind.p) > 0
if (insig == "pch" && p_inSig) {
points(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
pch = pch, col = pch.col, cex = pch.cex, lwd = 2)
}
if (insig == "p-value" && p_inSig) {
text(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
round(pNew[ind.p], 2), col = pch.col)
}
if (insig == "blank" && p_inSig) {
symbols(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
inches = FALSE, squares = rep(1, length(pos.pNew[,
1][ind.p])), fg = addgrid.col, bg = bg, add = TRUE)
}
}
}
if (cl.pos != "n") {
colRange <- assign.color(dat = cl.lim2)
ind1 <- which(col == colRange[1])
ind2 <- which(col == colRange[2])
colbar <- col[ind1:ind2]
if (is.null(cl.length)) {
cl.length <- ifelse(length(colbar) > 20, 11, length(colbar) +
1)
}
labels <- seq(cl.lim[1], cl.lim[2], length = cl.length)
if (cl.pos == "r") {
vertical <- TRUE
xlim <- c(m2 + 0.5 + mm * 0.02, m2 + 0.5 + mm * cl.ratio)
ylim <- c(n1 - 0.5, n2 + 0.5)
}
if (cl.pos == "b") {
vertical <- FALSE
xlim <- c(m1 - 0.5, m2 + 0.5)
ylim <- c(n1 - 0.5 - nn * cl.ratio, n1 - 0.5 - nn *
0.02)
}
corrplot::colorlegend(colbar = colbar, labels = round(labels, 2),
offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
xlim = xlim, ylim = ylim, vertical = vertical, align = cl.align.text)
}
if (tl.pos != "n") {
pos.xlabel <- cbind(m1:m2, n2 + 0.5 + laboffset)
pos.ylabel <- cbind(m1 - 0.5, n2:n1)
if (tl.pos == "td") {
if (type != "upper") {
stop("type should be \"upper\" if tl.pos is \"dt\".")
}
pos.ylabel <- cbind(m1:(m1 + nn) - 0.5, n2:n1)
}
if (tl.pos == "ld") {
if (type != "lower") {
stop("type should be \"lower\" if tl.pos is \"ld\".")
}
pos.xlabel <- cbind(m1:m2, n2:(n2 - mm) + 0.5 + laboffset)
}
if (tl.pos == "d") {
pos.ylabel <- cbind(m1:(m1 + nn) - 0.5, n2:n1)
pos.ylabel <- pos.ylabel[1:min(n, m), ]
symbols(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], add = TRUE,
bg = bg, fg = addgrid.col, inches = FALSE, squares = rep(1,
length(pos.ylabel[, 1])))
text(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], newcolnames[1:min(n,
m)], col = tl.col, cex = tl.cex, ...)
}
else {
text(pos.xlabel[, 1], pos.xlabel[, 2], newcolnames,
srt = tl.srt, adj = ifelse(tl.srt == 0, c(0.5,
0), c(0, 0)), col = tl.col, cex = tl.cex, offset = tl.offset,
...)
text(pos.ylabel[, 1], pos.ylabel[, 2], newrownames,
col = tl.col, cex = tl.cex, pos = 2, offset = tl.offset,
...)
}
}
title(title, ...)
if (!is.null(addCoef.col) && method != "number") {
text(Pos[, 1], Pos[, 2], col = addCoef.col, labels = round((DAT -
int) * ifelse(addCoefasPercent, 100, 1)/zoom, number.digits),
cex = number.cex, font = number.font)
}
if (type == "full" && plotCI == "n" && !is.null(addgrid.col)) {
rect(m1 - 0.5, n1 - 0.5, m2 + 0.5, n2 + 0.5, border = addgrid.col)
}
if (!is.null(addrect) && order == "hclust" && type == "full") {
corrRect.hclust(corr, k = addrect, method = hclust.method,
col = rect.col, lwd = rect.lwd)
}
invisible(corr)
}
files = list.files(path="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/phydist_rfdist/",
pattern="phydist_rfdist.*txt$",full.names = T)
for(file in files){
print(file)
normdist = read.table(file,
header=T,row.names = 1,sep="\t",fill=F)
spectralpal=colorRampPalette(c("#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"))
png(paste(file,"_rfdist_norm.png"))
customcorrplot(as.matrix(normdist),is.corr=F,diag=T,
main="",method="color",na.label=" ",col=c(rep(rgb(0,0,0,0),44),spectralpal(45)),
order="original",tl.offset=0.1,cl.lim=c(0,1),
tl.cex=0.25, cl.cex=0.5,cl.length=5,
mar=c(0,0,0,0))
dev.off()
}
normdist
as.dist(normdist)
as.data.frame(as.dist(normdist))
melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
?melt
reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
df <- reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
df
chrom = df[df$row!="all",df$col!="all"]
df$col!="all"
chrom = df[df$row!="all",]
chrom = df[df$row!="all" & df$col!="all",]
chrom
unique(chrom$row)
unique(chrom$col)
summary(chrom)
mean(df$value)
files = list.files(path="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/phydist_rfdist/",
pattern="phydist_rfdist.*txt$",full.names = T)
for(file in files){
print(file)
normdist = read.table(file,
header=T,row.names = 1,sep="\t",fill=F)
spectralpal=colorRampPalette(c("#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"))
png(paste(file,"_rfdist_norm.png"))
customcorrplot(as.matrix(normdist),is.corr=F,diag=T,
main="",method="color",na.label=" ",col=c(rep(rgb(0,0,0,0),44),spectralpal(45)),
order="original",tl.offset=0.1,cl.lim=c(0,1),
tl.cex=0.25, cl.cex=0.5,cl.length=5,
mar=c(0,0,0,0))
dev.off()
df <- reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
chrom = df[df$row!="all" & df$col!="all",]
print(mean(df$value))
}
for(file in files){
print(file)
normdist = read.table(file,
header=T,row.names = 1,sep="\t",fill=F)
spectralpal=colorRampPalette(c("#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"))
png(paste(file,"_rfdist_norm.png"))
customcorrplot(as.matrix(normdist),is.corr=F,diag=T,
main="",method="color",na.label=" ",col=c(rep(rgb(0,0,0,0),44),spectralpal(45)),
order="original",tl.offset=0.1,cl.lim=c(0,1),
tl.cex=0.25, cl.cex=0.5,cl.length=5,
mar=c(0,0,0,0))
dev.off()
df <- reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
chrom = df[df$row!="all" & df$col!="all",]
print(mean(df$value,na.rm=T))
}
for(file in files){
print(file)
normdist = read.table(file,
header=T,row.names = 1,sep="\t",fill=F)
spectralpal=colorRampPalette(c("#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"))
png(paste(file,"_rfdist_norm.png"))
customcorrplot(as.matrix(normdist),is.corr=F,diag=T,
main="",method="color",na.label=" ",col=c(rep(rgb(0,0,0,0),44),spectralpal(45)),
order="original",tl.offset=0.1,cl.lim=c(0,1),
tl.cex=0.25, cl.cex=0.5,cl.length=5,
mar=c(0,0,0,0))
dev.off()
df <- reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
chrom = df[df$row!="all" & df$col!="all",]
print(mean(df$value,na.rm=T))
print(sd(df$value,na.rm=T))
}
chrom
for(file in files){
print(file)
normdist = read.table(file,
header=T,row.names = 1,sep="\t",fill=F)
spectralpal=colorRampPalette(c("#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"))
png(paste(file,"_rfdist_norm.png"))
customcorrplot(as.matrix(normdist),is.corr=F,diag=T,
main="",method="color",na.label=" ",col=c(rep(rgb(0,0,0,0),44),spectralpal(45)),
order="original",tl.offset=0.1,cl.lim=c(0,1),
tl.cex=0.25, cl.cex=0.5,cl.length=5,
mar=c(0,0,0,0))
dev.off()
df <- reshape2::melt(as.matrix(as.dist(normdist)), varnames = c("row", "col"))
chrom = df[df$row!="all" & df$col!="all",]
write.table(chrom,paste(file,"_pairwise.txt"))
print(mean(df$value,na.rm=T))
print(sd(df$value,na.rm=T))
}
allspp=read.table("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/phydist_rfdist/allspp.pairwise.txt",
header=T,sep="\t")
head(allspp)
plot(allspp$value,allspp$rowsize)
plot(allspp$rowsize,allspp$value)
plot(log10(allspp$rowsize),allspp$value)
lm(allspp$value~log10(allspp$rowsize))
mod=lm(allspp$value~log10(allspp$rowsize))
summary(mod)
mod=lm(allspp$value~(allspp$rowsize))
summary(mod)
table(allspp$value)
agg(allspp$value~allspp$row)
aggregate(allspp$value~allspp$row)
aggregate(allspp$value~allspp$row,FUN=function(x){mean(x,na.rm=T)})
combined=aggregate(allspp$value~allspp$row,FUN=function(x){mean(x,na.rm=T)})
sizes=unique(allspp[,c("row","rowsize")])
sizes
merged=merge(combined,sizes)
merged
head(combined)
names(combined)=c("row","value")
sizes=unique(allspp[,c("row","rowsize")])
merged=merge(combined,sizes)
merged
plot(combined[,2:3])
plot(merged[,2:3])
plot(merged$value,merged$rowsize)
plot(merged$rowsize,merged$value)
plot(log10(merged$rowsize),merged$value)
mod=lm(merged$value~log10(merged$rowsize))
summary(mod)
mod=lm(merged$value~(merged$rowsize))
summary(mod)
df = read.csv("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER3_TRAITS/morphology/measurements/aggregated datasets/KLP_Master_Spreadsheet_Morphology_AGGREGATED_10_April_2020_PCASCORES_FULL.csv")
head(df)
df = unique(df)
head(df)
df = df[,c("PC1","PC2","PC3","WHICH.SIDE.OF.CFB","SPP")]
df = df[,c("PC1","PC2","PC3","WHICH.SIDE.OF.CFB","SPP","CATALOG.NUMBER")]
df = read.csv("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER3_TRAITS/morphology/measurements/aggregated datasets/KLP_Master_Spreadsheet_Morphology_AGGREGATED_10_April_2020_PCASCORES_FULL.csv")
df = df[,c("PC1","PC2","PC3","WHICH.SIDE.OF.CFB","SPP","CATALOG.NUMBER")]
df = unique(df)
head(df)
df
df= read.table("/Users/kprovost/Dropbox (AMNH)/Dissertation/temp_morph_unique_pca.txt",sep="\t")
head(df)
df= read.table("/Users/kprovost/Dropbox (AMNH)/Dissertation/temp_morph_unique_pca.txt",sep="\t",header=T)
head(df)
boxplot(df$PC1~df$SPP)
boxplot(df$PC1~df$SPP)
aggregate(df$PC1~df$WHICH.SIDE.OF.CFB+df$SPP,FUN=function(x){mean(x,na.rm=T)})
aggregate(df$PC2~df$WHICH.SIDE.OF.CFB+df$SPP,FUN=function(x){mean(x,na.rm=T)})
aggregate(df$PC3~df$WHICH.SIDE.OF.CFB+df$SPP,FUN=function(x){mean(x,na.rm=T)})
pval(df$PC1[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="BILINEATA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="BILINEATA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="BRUNNEICAPILLUS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="BRUNNEICAPILLUS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="CRISSALE"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="CRISSALE" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="CURVIROSTRE"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="CURVIROSTRE" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="FLAVIEPS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="FLAVICEPS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="FLAVICEPS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="FLAVICEPS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="FUSCA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="FUSCA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="MELANURA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="MELANURA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="NITENS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="NITENS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC1[df$SPP=="SINUATUS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC1[df$SPP=="SINUATUS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="BILINEATA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="BILINEATA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="BRUNNEICAPILLUS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="BRUNNEICAPILLUS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
df
t.test(df$PC2[df$SPP=="CRISSALE"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="CRISSALE" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="FLAVICEPS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="FLAVICEPS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="FUSCA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="FUSCA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC2[df$SPP=="MELANURA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC2[df$SPP=="MELANURA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="BELLII"&df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="BILINEATA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="BILINEATA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="CRISSALE"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="CRISSALE" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="FLAVICEPS"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="FLAVICEPS" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="FUSCA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="FUSCA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
t.test(df$PC3[df$SPP=="MELANURA"&df$WHICH.SIDE.OF.CFB=="CHIHUAHUAN"],df$PC3[df$SPP=="MELANURA" &df$WHICH.SIDE.OF.CFB=="SONORAN"])
