#!/bin/bash
#PBS -l select=1:ncpus=4
#PBS -l walltime=5000:00:00
#PBS -N relernn
#PBS -j oe
#PBS -m ae
#PBS -M kprovost@amnh.org
#PBS -k oe

# change to the working directory
cd $PBS_O_WORKDIR
echo "pbsworkdir"
echo $PBS_O_WORKDIR
EXECDIR=`pwd`
export PATH=./:$PATH
echo $PATH


cd "/vz-nas1-active/ProcessedGenomicReads/EVERY_PLATE/ANGSD/VCFS/BRUNNEICAPILLUS/"

rm simulate.log

echo "#########################
START
#########################" >> simulate.log

for vcffile in ${PWD}/*test2.vcf; do 


echo "#########################
$vcffile
#########################" >> simulate.log; #done

## first remove extra chrom information
#python3 removeExtraChromInfoFromVCFS.py $vcffile

## second generate the bed files
#python3 generate_relernn_bed_files.py $vcffile.fixedchroms

## need to see if the file is sorted! 

if [ ! -f "$vcffile.sorted" ]; then
python3 /home/kprovost/nas4/sort_vcfs.py $vcffile
vcffile=$vcffile.sorted
fi

#SIMULATE="ReLERNN_SIMULATE"
SIMULATE="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_SIMULATE"
TRAIN="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_TRAIN"
#TRAIN="ReLERNN_TRAIN"
PREDICT="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_PREDICT"
#PREDICT="ReLERNN_PREDICT"
BSCORRECT="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_BSCORRECT"
#BSCORRECT="ReLERNN_BSCORRECT"
CPU="4"
#MU="1e-8"
MU="2.21e-9"
RTR="1"
#DIR="./example_output/"
DIR="$PWD"
#VCF="./example.vcf"
VCF="$vcffile"
#GENOME="./genome.bed"
GENOME="$vcffile.bed"
#MASK="./accessibility_mask.bed"
MASK="$vcffile.mask"

if [ ! -f "$GENOME" ]; then
python3 /home/kprovost/nas4/generate_relernn_bed_files.py $vcffile
fi
if [ ! -f "$MASK" ]; then
python3 /home/kprovost/nas4/generate_relernn_bed_files.py $vcffile
fi



# Simulate data
${SIMULATE} \
    --vcf ${VCF} \
    --genome ${GENOME} \
    --mask ${MASK} \
    --unphased \
    --projectDir ${DIR} \
    --assumedMu ${MU} \
    --upperRhoThetaRatio ${RTR} \
    --nTrain 12800 \
    --nVali 2000 \
    --nTest 100 \
    --nCPU ${CPU} >> simulate.log 2>&1
## removed --phased

# Train network
${TRAIN} \
    --projectDir ${DIR} \
    --nEpochs 2 \
    --nValSteps 2 >> simulate.log 2>&1

# Predict
${PREDICT} \
    --vcf ${VCF} \
    --projectDir ${DIR} >> simulate.log 2>&1

# Parametric Bootstrapping
${BSCORRECT} \
    --projectDir ${DIR} \
    --nCPU ${CPU} \
    --nSlice 2 \
    --nReps 2 >> simulate.log 2>&1
    
done;
