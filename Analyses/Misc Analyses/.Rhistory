merged=read.table("~/rec_taj_dxy_fst_islswp_missing.temp",fill=T,header=T,stringsAsFactors = F)
only_miss = merged[!(is.na(merged$mean_F_MISS)),]
only_miss_fst = only_miss[!(is.na(only_miss$Fst))]
only_miss_fst = only_miss[!(is.na(only_miss$Fst)),]
only_miss_dxy = only_miss[!(is.na(only_miss$dxymeans)),]
head(only_miss)
names(only_miss)
only_miss = merged[!(is.na(merged$mean_F_MISS)),c("chr","midPos","species","weighted_recomb",
"Tajima","Fst","dxymeans","ranksppISLAND",
"ranksppSWEEP","plotrder","mean_F_MISS")]
only_miss = merged[!(is.na(merged$mean_F_MISS)),c("chr","midPos","species","weighted_recomb",
"Tajima","Fst","dxymeans","ranksppISLAND",
"ranksppSWEEP","plotorder","mean_F_MISS")]
only_miss_fst = only_miss[!(is.na(only_miss$Fst)),]
only_miss_dxy = only_miss[!(is.na(only_miss$dxymeans)),]
only_miss_fst = only_miss[!(is.na(only_miss$Fst)),]
only_miss_dxy = only_miss[!(is.na(only_miss$dxymeans)),]
only_miss_taj = only_miss[!(is.na(only_miss$Tajima)),]
only_miss_rec = only_miss[!(is.na(only_miss$weighted_recomb)),]
only_miss_swp = only_miss[!(is.na(only_miss$ranksppSWEEP)),]
only_miss_isl = only_miss[!(is.na(only_miss$ranksppISLAND)),]
png("~/testmissing.png",width=800,height=500)
par(mfrow=c(2,3))
plot(only_miss_fst$mean_F_MISS,only_miss_fst$Fst,col=as.numeric(as.factor(only_miss_fst$species)))
plot(only_miss_dxy$mean_F_MISS,only_miss_dxy$dxymeans,col=as.numeric(as.factor(only_miss_dxy$species)))
plot(only_miss_taj$mean_F_MISS,only_miss_taj$Tajima,col=as.numeric(as.factor(only_miss_taj$species)))
plot(only_miss_rec$mean_F_MISS,only_miss_rec$weighted_recomb,col=as.numeric(as.factor(only_miss_rec$species)))
plot(only_miss_swp$mean_F_MISS,only_miss_swp$ranksppSWEEP,col=as.numeric(as.factor(only_miss_swp$species)))
plot(only_miss_isl$mean_F_MISS,only_miss_isl$ranksppISLAND,col=as.numeric(as.factor(only_miss_isl$species)))
#mod = lm(only_miss$Fst~only_miss$mean_F_MISS)
dev.off()
boxplot(only_miss_swp$ranksppSWEEP~only_miss_swp$species+only_miss_swp$ranksppSWEEP)
boxplot(only_miss_swp$ranksppSWEEP~c(only_miss_swp$species+only_miss_swp$ranksppSWEEP))
boxplot(only_miss_swp$mean_F_MISS~only_miss_swp$species+only_miss_swp$ranksppSWEEP)
boxplot(only_miss_swp$mean_F_MISS~only_miss_swp$species
)
only_miss_swp$mean_F_MISS
boxplot(only_miss_swp$mean_F_MISS~c(only_miss_swp$species+only_miss_swp$ranksppSWEEP))
boxplot(only_miss_swp$mean_F_MISS~only_miss_swp$ranksppSWEEP)
only_miss_swp$ranksppSWEEP
boxplot(only_miss_swp$mean_F_MISS~only_miss_swp$ranksppSWEEP)
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP))
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP)+as.character(only_miss_swp$species))
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP))
?boxplot
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=F)
png("~/testmissing.png",width=800,height=500)
par(mfrow=c(2,3))
plot(only_miss_fst$mean_F_MISS,only_miss_fst$Fst,col=as.numeric(as.factor(only_miss_fst$species)))
plot(only_miss_dxy$mean_F_MISS,only_miss_dxy$dxymeans,col=as.numeric(as.factor(only_miss_dxy$species)))
plot(only_miss_taj$mean_F_MISS,only_miss_taj$Tajima,col=as.numeric(as.factor(only_miss_taj$species)))
plot(only_miss_rec$mean_F_MISS,only_miss_rec$weighted_recomb,col=as.numeric(as.factor(only_miss_rec$species)))
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_isl$mean_F_MISS)~as.character(only_miss_isl$ranksppISLAND),
outline=F,main="no outliers")
#mod = lm(only_miss$Fst~only_miss$mean_F_MISS)
dev.off()
cor(only_miss[,c("weighted_recomb","Tajima","Fst","dxymeans","mean_F_MISS")])
cor(only_miss[,c("weighted_recomb","Tajima","Fst","dxymeans","mean_F_MISS")],
use="pairwise.complete.obs")
cor(cbind(only_miss$Fst,only_miss$dxymeans,only_miss$Tajima,only_miss$weighted_recomb,merged$mean_F_MISS),
use="pairwise.complete.obs")
cbind(only_miss$Fst,only_miss$dxymeans,only_miss$Tajima,only_miss$weighted_recomb,merged$mean_F_MISS)
cor(cbind(as.numeric(only_miss$Fst),as.numeric(only_miss$dxymeans),
as.numeric(only_miss$Tajima),as.numeric(only_miss$weighted_recomb),
as.numeric(only_miss$mean_F_MISS)),
use="pairwise.complete.obs")
cor(cbind(fst=as.numeric(only_miss$Fst),dxy=as.numeric(only_miss$dxymeans),
taj=as.numeric(only_miss$Tajima),rec=as.numeric(only_miss$weighted_recomb),
miss=as.numeric(only_miss$mean_F_MISS)),
use="pairwise.complete.obs")
dim(only_miss_dxy)
## dxy and missing are fairly correlated
plot(only_miss_dxy$dxymeans,only_miss_dxy$mean_F_MISS)
## dxy and missing are fairly correlated
plot(only_miss_dxy$mean_F_MISS,only_miss_dxy$dxymeans)
## dxy and missing are fairly correlated
plot(only_miss_dxy$mean_F_MISS,only_miss_dxy$dxymeans,col=rgb(0,0,0,0.1))
lm(as.numeric(only_miss_dxy$mean_F_MISS)~as.numeric(only_miss_dxy$dxymeans))
mod=lm(as.numeric(only_miss_dxy$mean_F_MISS)~as.numeric(only_miss_dxy$dxymeans))
mod=lm(as.numeric(only_miss_dxy$dxymeans~as.numeric(only_miss_dxy$mean_F_MISS)))
mod=lm(as.numeric(only_miss_dxy$dxymeans)~as.numeric(only_miss_dxy$mean_F_MISS))
abline(mod,col="red")
summary(mod)
summary(only_miss_dxy$dxymeans)
?rank
dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans))
hist(dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans)))
plot(as.numeric(only_miss_dxy$dxymeans),
dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans)))
plot(dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans)),
as.numeric(only_miss_dxy$dxymeans))
abline(v=0.95)
nooutliers = only_miss_dxy[dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans))<0.95,]
plot(dplyr::percent_rank(as.numeric(nooutliers$dxymeans)),
as.numeric(nooutliers$dxymeans))
nooutliers = only_miss_dxy[dplyr::percent_rank(as.numeric(only_miss_dxy$dxymeans))<0.95,]
plot(as.numeric(nooutliers$mean_F_MISS),as.numeric(nooutliers$dxymeans),
col=rgb(0,0,0,0.1))
mod=lm(as.numeric(nooutliers$dxymeans)~as.numeric(nooutliers$mean_F_MISS))
abline(mod,col="red")
summary(mod)
plot(dplyr::percent_rank(as.numeric(nooutliers$dxymeans)),
as.numeric(nooutliers$dxymeans))
abline(v=0.95)
plot(dplyr::percent_rank(as.numeric(only_miss_dxy$mean_F_MISS)),
as.numeric(only_miss_dxy$mean_F_MISS))
abline(v=0.95)
abline(v=0.05)
nooutliers = nooutliers[dplyr::percent_rank(as.numeric(nooutliers$mean_F_MISS))>0.05,]
plot(dplyr::percent_rank(as.numeric(nooutliers$mean_F_MISS)),
as.numeric(nooutliers$mean_F_MISS))
plot(as.numeric(nooutliers$mean_F_MISS),as.numeric(nooutliers$dxymeans),
col=rgb(0,0,0,0.1))
mod=lm(as.numeric(nooutliers$dxymeans)~as.numeric(nooutliers$mean_F_MISS))
abline(mod,col="red")
summary(mod)
nooutliers = only_miss_dxy[dplyr::percent_rank(as.numeric(only_miss_dxy$mean_F_MISS))>0.05,]
plot(as.numeric(nooutliers$mean_F_MISS),as.numeric(nooutliers$dxymeans),
col=rgb(0,0,0,0.1))
mod=lm(as.numeric(nooutliers$dxymeans)~as.numeric(nooutliers$mean_F_MISS))
abline(mod,col="red")
summary(mod)
only_miss = merged[!(is.na(merged$mean_F_MISS)),c("chr","midPos","species","weighted_recomb",
"Tajima","Fst","dxymeans","ranksppISLAND",
"ranksppSWEEP","plotorder","mean_F_MISS",
"ranksppDXY")]
only_miss_dxyrank = only_miss[!(is.na(only_miss$ranksppDXY)),]
only_miss_dxyrank = only_miss[!(is.na(only_miss$ranksppDXY)),]
only_miss_dxyrank$ranksppMISS = NA
for(spp in unique(only_miss_dxyrank$species)){
only_miss_dxyrank$ranksppMISS[only_miss_dxyrank$species==spp] = dplyr::percent_rank(as.numeric(only_miss_dxyrank$mean_F_MISS[only_miss_dxyrank$species==spp]))
}
plot(only_miss_dxyrank$ranksppMISS,only_miss_dxyrank$ranksppDXY)
plot(only_miss_dxyrank$ranksppMISS,only_miss_dxyrank$ranksppDXY)
mod=lm(as.numeric(only_miss_dxy$ranksppDXY)~as.numeric(only_miss_dxy$ranksppMISS))
as.numeric(only_miss_dxy$ranksppDXY)
mod=lm(as.numeric(only_miss_dxyrank$ranksppDXY)~as.numeric(only_miss_dxyrank$ranksppMISS))
abline(mod,col="red")
summary(mod)
only_miss_dxyrank$lowdxy = only_miss_dxyrank$ranksppDXY<0.05
only_miss_dxyrank$highdxy = only_miss_dxyrank$ranksppDXY>=0.95
boxplot(only_miss_dxyrank$mean_F_MISS~only_miss_dxyrank$lowdxy+only_miss_dxyrank$highdxy)
boxplot(only_miss_dxyrank$mean_F_MISS~as.character(only_miss_dxyrank$lowdxy)
+as.character(only_miss_dxyrank$highdxy))
boxplot(as.numeric(only_miss_dxyrank$mean_F_MISS)~as.character(only_miss_dxyrank$lowdxy)
+as.character(only_miss_dxyrank$highdxy))
boxplot(as.numeric(only_miss_dxyrank$mean_F_MISS)~as.character(only_miss_dxyrank$lowdxy)
+as.character(only_miss_dxyrank$highdxy))
boxplot(as.numeric(only_miss_dxyrank$mean_F_MISS)~as.character(only_miss_dxyrank$lowdxy)
+as.character(only_miss_dxyrank$highdxy),
names=c("middle","low","high"))
boxplot(as.numeric(only_miss_dxyrank$mean_F_MISS)~as.character(only_miss_dxyrank$lowdxy)
+as.character(only_miss_dxyrank$highdxy),
names=c("middle","low","high","n/a"))
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_isl$mean_F_MISS)~as.character(only_miss_isl$ranksppISLAND),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_isl$mean_F_MISS)~as.character(only_miss_isl$ranksppISLAND),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=F,main="no outliers")
boxplot(as.numeric(only_miss_swp$mean_F_MISS)~as.character(only_miss_swp$ranksppSWEEP),
outline=T,main="no outliers")
boxplot(as.numeric(only_miss_isl$mean_F_MISS)~as.character(only_miss_isl$ranksppISLAND),
outline=T,main="no outliers")
#filename="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/called_geno/merged_empirical_stats_same_cols_TRIMMED.txt"
#filename="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/called_geno/all_merged_8_april_2020_TRIMMED_max_empirical.txt"
filename="/Users/kprovost/Dropbox (AMNH)/Dissertation/MERGED_COMPLETE_SUMSTATS_MLPIPELINE_29may2020.txt" ## old: - final .csv
df = read.table(filename,sep="\t",stringsAsFactors = F,header=T,fill=T)
file2="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/called_geno/SPECIES/STATS/MERGED_all_merged_29_may_2020.txt" ## old: 8 april
df2 = read.table(file2,sep="\t",stringsAsFactors = F,header=T,fill=T)
tail(df[df$DEMOG=="EMPIRICAL",goodcols])
df$YEAR[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$MIGRATION.RATE[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$MUTATIONPOWER[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$NUMRUN[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$SCALE[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$SECCON[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$IBD[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$EFFPOPSIZE[df$DEMOG=="EMPIRICAL"] = "UNK"
df$RUN[df$DEMOG=="EMPIRICAL"] = "EMPIRICAL"
df$WINDOWNUM[is.na(df$WINDOWNUM)] = df$WINDOW[is.na(df$WINDOWNUM)]
df$WINDOW[is.na(df$WINDOW)] = df$WINDOWNUM[is.na(df$WINDOW)]
df$WINDOWSIZE[is.na(df$WINDOWSIZE)] = df$WINDOW.SIZE[is.na(df$WINDOWSIZE)]
df$WINDOW.SIZE[is.na(df$WINDOW.SIZE)] = df$WINDOWSIZE[is.na(df$WINDOW.SIZE)]
df$SPECIES[df$FILE==""] = "SIMULATION"
df$SPECIES[df$SPECIES==""] = "SIMULATION"
df$SPECIES[grepl("RECAP",df$FILE)] = "SIMULATION"
df=unique(df)
df2 = df2[df2$DEMOG!="EMPIRICAL",]
df2$WINDOW = 0
df2$WINDOW.SIZE = 100000
df2$WINDOWNUM = 0
df2$WINDOWSIZE = 100000
df2$SPECIES = "SIMULATION"
df2$SPECIES[grepl("TGUT",df2$FILE)] = "EMPIRICAL"
df2$DEMOG[grepl("TGUT",df2$FILE)] = "EMPIRICAL"
df2$SPECIES[grepl("-CALLED",df2$FILE)] = "EMPIRICAL"
df2$DEMOG[grepl("-CALLED",df2$FILE)] = "EMPIRICAL"
df2$FILE[grepl("-CALLED",df2$FILE)] = "EMPIRICAL"
df2 = df2[df2$DEMOG!="EMPIRICAL",]
df2 = df2[df2$SPECIES!="EMPIRICAL",]
df2 = df2[df2$YEAR!="EMPIRICAL",]
df2 = df2[df2$FILE!="EMPIRICAL",]
df2$FILE[df2$FILE==""] = "SIMULATION"
df2$CHROMOSOME[df2$CHROMOSOME==""] = "SIMULATION"
df2$EFFPOPSIZE[df2$EFFPOPSIZE==""] = 400000
df2$RECOMPOWER[df2$RECOMPOWER==""] = -8
df2$MUTATIONPOWER[df2$MUTATIONPOWER==""] = -9
df2$SECCON[df2$DEMOG=="SECCON"] = 1
df2$SECCON[df2$DEMOG!="SECCON"] = 0
df2=df2[df2$DEMOG!="SCALE1",]
df2$CHROM=df2$CHROMOSOME
df2$RUN[df2$RUN==""] = "SIMULATION"
df2$OVERLAP=100000
df2$OVERLAP.SIZE=100000
df2$NUMRUN[is.na(df2$NUMRUN)] = paste(df2$DEMOG[is.na(df2$NUMRUN)],df2$IBD[is.na(df2$NUMRUN)])
df2$NUMRUN[df2$NUMRUN=="PANMIXIA FALSE"]=1
df2$NUMRUN[df2$NUMRUN=="PANMIXIA TRUE"]=2
df2$NUMRUN[df2$NUMRUN=="ISOLATION FALSE"]=3
df2$NUMRUN[df2$NUMRUN=="ISOLATION TRUE"]=4
df2$NUMRUN[df2$NUMRUN=="GENEFLOW FALSE"]=5
df2$NUMRUN[df2$NUMRUN=="GENEFLOW TRUE"]=6
df2$NUMRUN[df2$NUMRUN=="SECCON FALSE"]=7
df2$NUMRUN[df2$NUMRUN=="SECCON TRUE"]=8
df2$MIGRATION.RATE[df2$NUMRUN>=5] = 0.1
df2$MIGRATION.RATE[df2$NUMRUN<5] = 0
df2 = unique(df2)
goodcols = sort(unique(c("CHROM","DEMOG","SPECIES","FILE","EFFPOPSIZE","IBD","MIGRATION.RATE",
"MUTATIONPOWER","NUMRUN","OVERLAP.SIZE","SCALE",
"RUN","WINDOW","WINDOW.SIZE","YEAR","OVERLAP","SECCON",
"WINDOWSIZE","WINDOWNUM","CHROMOSOME")))
agg = merge(df2,df,all=T)
agg=unique(agg)
badcols = c()
for (colnumber in 1:ncol(agg)){
thiscol = unique(agg[,colnumber])
thiscol[thiscol==""] = NA
thiscol[thiscol=="NA"] = NA
thiscol = thiscol[!(is.na(thiscol))]
thiscol = thiscol[!(is.null(thiscol))]
thiscol=unique(thiscol)
print(thiscol[1:min(5,length(thiscol))])
if(length(thiscol)<=1){
badcols=c(badcols,colnames(agg)[colnumber])
}
}
badcols = badcols[!(badcols %in% goodcols)]
agg = agg[,-c(which(colnames(agg) %in% badcols))]
badcols = c()
for(colnumber in 1:ncol(agg)) {
nonblank=sum(!(is.na(agg[,colnumber])) & (agg[,colnumber] != ""))
cat(nonblank," ")
if(nonblank <= 1000){
badcols=c(badcols,colnames(agg)[colnumber])
}
}
badcols = badcols[!(badcols %in% goodcols)]
agg = agg[,-c(which(colnames(agg) %in% badcols))]
agg = unique(agg)
agg_emp = agg[agg$DEMOG=="EMPIRICAL",]
agg_noemp = agg[agg$DEMOG!="EMPIRICAL",]
badcols = c()
for(colnumber in 1:ncol(agg_emp)) {
nonblank=sum(!(is.na(agg_emp[,colnumber])) & (agg_emp[,colnumber] != ""))
print(nonblank)
if(nonblank <= 1000){
badcols=c(badcols,colnames(agg_emp)[colnumber])
}
}
badcols = badcols[!(badcols %in% goodcols)]
agg_emp = agg_emp[,-c(which(colnames(agg_emp) %in% badcols))]
badcols = c()
for(colnumber in 1:ncol(agg_noemp)) {
nonblank=sum(!(is.na(agg_noemp[,colnumber])) & (agg_noemp[,colnumber] != ""))
cat(nonblank, " ")
if(nonblank <= 10000){
badcols=c(badcols,colnames(agg_noemp)[colnumber])
}
}
badcols = badcols[!(badcols %in% goodcols)]
if(length(badcols)>0){
agg_noemp = agg_noemp[,-c(which(colnames(agg_noemp) %in% badcols))]
}
colskeep = intersect(names(agg_emp),names(agg_noemp))
agg = agg[,colskeep]
agg = unique(agg)
head(agg)
agg_meta = agg[,goodcols]
agg_numb = agg[,-which(colnames(agg) %in% goodcols)]
agg_meta=agg_meta[complete.cases(agg_numb),]
agg_numb=agg_numb[complete.cases(agg_numb),]
pca = prcomp(agg_numb,center=T,scale. = T)
summary(pca)
#pcadata = cbind(good_notnum,pca$x)
pcadata = cbind(agg_meta,pca$x)
palette(c(RColorBrewer::brewer.pal(8,"Dark2"),
RColorBrewer::brewer.pal(12,"Paired"))
)
#plot(pcadata$PC1,pcadata$PC2,col=as.numeric(as.factor(pcadata$DEMOG))-1,
#     pch=as.numeric(as.factor(pcadata$SPECIES)))
plot(pcadata$PC1,pcadata$PC2,col=as.numeric(as.factor(pcadata$SPECIES)),
pch=as.numeric(as.factor(pcadata$SPECIES)))
pcadata$ISSIM = as.numeric(!(pcadata$DEMOG %in% c("EMPIRICAL")))
plot(pcadata$PC1,pcadata$PC2,col="black",cex=0.75,pch=22,
#bg=as.numeric(as.factor(pcadata$SPECIES)),
bg=pcadata$ISSIM,
lwd=0.5#,xlim=c(-5,5),ylim=c(-5,5)
)
pca_emp = pcadata[pcadata$ISSIM==0,]
## pc1 -11.3183 to 5.3304
## pc2 -10.4567 to 7.8451
pca_sim = pcadata[pcadata$ISSIM==1,]
subset = pcadata[pcadata$PC1 >= min(pca_sim$PC1),]
subset = subset[subset$PC1 <= max(pca_emp$PC1),]
subset = subset[subset$PC2 <= max(pca_sim$PC2),]
subset = subset[subset$PC2 >= min(pca_sim$PC2),]
subset = subset[subset$PC2 <= 4,]
subset = subset[(subset$PC1+subset$PC2) <= 4,]
subset = subset[(subset$PC1+subset$PC2) >= -4,]
subset = subset[(subset$PC1*subset$PC2) >= -10,]
plot(subset$PC1,subset$PC2,col="black",cex=0.75,pch=22,
#bg=as.numeric(as.factor(pcadata$SPECIES)),
bg=subset$ISSIM,
lwd=0.5#,xlim=c(-5,5),ylim=c(-5,5)
)
points(pcadata$PC1[pcadata$SPECIES=="SIMULATION"],
pcadata$PC2[pcadata$SPECIES=="SIMULATION"],
cex=1,pch=16,
col=as.numeric(as.factor(pcadata$DEMOG[pcadata$SPECIES=="SIMULATION"])))
legend(x="bottomleft",cex=1,
legend=unique(as.factor(
pcadata$DEMOG[pcadata$SPECIES=="SIMULATION"])),
col=unique(as.numeric(as.factor(
pcadata$DEMOG[pcadata$SPECIES=="SIMULATION"]))),
pch=16)
subset[subset$SPECIES=="SIMULATION",]
boxplot(pcadata$PC1~pcadata$ISSIM)
boxplot(pcadata$PC2~pcadata$ISSIM)
for(i in 1:length(levels(as.factor(pcadata$SPECIES)))) {
spp=unique(levels(as.factor(pcadata$SPECIES)))[i]
car::ellipse(center = colMeans(pcadata[pcadata$SPECIES==spp,
c("PC1","PC2")]),
shape = cov(pcadata[pcadata$SPECIES==spp,
c("PC2","PC1")]),
center.pch=1,center.cex=2,lwd=3,lty=1,
radius = sqrt(qchisq(.5, df=2)),col = i)
}
legend("bottomright",
legend=levels(as.factor(pcadata$SPECIES)),
col=1:length(levels(as.factor(pcadata$SPECIES))),
fill=1:length(levels(as.factor(pcadata$SPECIES))),
pch=22,
cex=0.5,
ncol=2)
cl=kmeans(pca$x,centers=11)
plot(pcadata$PC1,pcadata$PC2,col="lightgrey",cex=0.3,pch=1)
points(pcadata$PC1[pcadata$SPECIES=="SIMULATION"],
pcadata$PC2[pcadata$SPECIES=="SIMULATION"],cex=2,col="red")
points(pcadata$PC1,pcadata$PC2,col=cl$cluster,pch=cl$cluster)
df = df[complete.cases(df),]
notnumeric=df[,c(1,2,4,5,10,16,17,23,25,26,30,42,43)]
numeric=df[,-c(1,2,4,5,10,16,17,23,25,26,30,42,43)]
sims=df[df$SPECIES=="SIMULATION",]
emps=df[df$SPECIES!="SIMULATION",]
summary(numeric)
summary(notnumeric)
#pca = prcomp(good_num,center=T,scale. = T)
pca = prcomp(numeric,center=T,scale. = T)
summary(pca)
#pcadata = cbind(good_notnum,pca$x)
pcadata = cbind(notnumeric,pca$x)
palette(viridis::viridis(11))
#plot(pcadata$PC1,pcadata$PC2,col=as.numeric(as.factor(pcadata$DEMOG))-1,
#     pch=as.numeric(as.factor(pcadata$SPECIES)))
plot(pcadata$PC1,pcadata$PC2,col=as.numeric(as.factor(pcadata$SPECIES)),
pch=as.numeric(as.factor(pcadata$SPECIES)))
palette(viridis::viridis(3))
plot(pcadata$PC1,pcadata$PC2,col=as.numeric(as.factor(pcadata$SIMDEFAULT.)),
pch=as.numeric(as.factor(pcadata$SPECIES)))
par(mfrow=c(3,4))
for(spp in unique(pcadata$species)){
toplot = pcadata[pcadata$species==spp,]
plot(pcadata$PC1,pcadata$PC2,main=spp,col="lightgrey")
points(toplot$PC1,toplot$PC2,col="red")
}
palette(c("white","red","orange","goldenrod","green",
"cyan","blue","magenta","white","purple",
"brown","black","grey","darkred"))
emponly = pcadata[pcadata$species!="simulation",]
emponly = emponly[emponly$species!="",]
plot(emponly$PC1,emponly$PC2,col=as.numeric(as.factor(emponly$species)),
pch=as.numeric(as.factor(emponly$species)))
legend("topleft",legend=unique(as.factor(emponly$species)),col=unique(as.numeric(as.factor(emponly$species))),
pch=unique(as.numeric(as.factor(emponly$species))),
bty="n",cex=0.75)
par(mfrow=c(3,4))
for(spp in unique(emponly$species)){
toplot = emponly[emponly$species==spp,]
plot(emponly$PC1,emponly$PC2,main=spp,col="lightgrey")
points(toplot$PC1,toplot$PC2,col="red")
}
good_for_emp = emps[,c(1:37)]
good_for_emp = good_for_emp[complete.cases(good_for_emp),]
good_emp = good_for_emp[,c(8:12,15:37)]
good_empnot = good_for_emp[,c(1:7,13:14)]
pcaemp = prcomp(good_emp,center=T,scale. = T)
summary(pcaemp)
pcadataemp = cbind(good_empnot,pcaemp$x)
plot(pcadataemp$PC1,pcadataemp$PC2,col=as.numeric(as.factor(pcadataemp$species)),
pch=as.numeric(as.factor(pcadataemp$species)),
ylim=c(-7,10),xlim=c(-10,10))
legend("topleft",legend=unique(as.factor(pcadataemp$species)),
col=unique(as.numeric(as.factor(pcadataemp$species))),
pch=unique(as.numeric(as.factor(pcadataemp$species))),
bty="n",cex=0.75)
trimmed = "/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/called_geno/merged_empirical_stats_same_cols_TRIMMED_extra.txt"
scaled = "/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/called_geno/MERGEDPOP_TOGETHER.txt"
bigdata = "/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER1_REVIEW/SLIM/runs/STATS_testing/TESTING/RECAPSTATS/MERGEDPOP_FINAL_trimmed.txt"
package_version(lme4)
package_version("lm4e4")
package_version("lme4")
citation(lme4)
citation("lme4")
mode=c("Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Allopatry","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Ecological","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Multiple","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear","Unclear")
year=c(1986,1990,1995,1995,1996,1997,1997,1999,2000,2000,2000,2001,2004,2005,2005,2007,2008,2009,2010,2011,2012,2012,2013,2013,2016,2017,2018,2018,2004,2007,2009,2012,2015,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2018,2018,2018,2018,2018,2018,2019,2019,2019,2019,2019,2019,2019,2019,2019,2019,1996,2000,2000,2001,2001,2003,2007,2010,2014,2014,2015,2016,1991,1996,2000,2000,2001,2002,2002,2004,2005,2006,2006,2006,2006,2006,2007,2007,2007,2008,2008,2009,2009,2011,2011,2011,2012,2012,2015,2016,2017,2017,2017,2017,2018,2018,2019,2019)
boxplot(year~mode)
boxplot(year~mode)
