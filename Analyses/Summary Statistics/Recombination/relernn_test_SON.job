#!/bin/bash
#PBS -l select=1:ncpus=1
#PBS -l walltime=5000:00:00
#PBS -N bel3_fullrelernn
#PBS -j oe
#PBS -m ae
#PBS -M kprovost@amnh.org
#PBS -k oe

# change to the working directory
cd $PBS_O_WORKDIR
echo "pbsworkdir"
echo $PBS_O_WORKDIR
EXECDIR=`pwd`
export PATH=./:$PATH
echo $PATH

## current config: give it a vcffile 

cd "/vz-nas1-active/ProcessedGenomicReads/EVERY_PLATE/ANGSD/VCFS/"

mainpath="/vz-nas1-active/ProcessedGenomicReads/EVERY_PLATE/ANGSD/VCFS/"

#echo "$mainpath \n\n"  >> simulate.log
cd $mainpath
#for directory in */; do
#echo "$directory \n\n" >> simulate.log
#cd $directory;

module load bcftools-1.10.2 

## /home/kprovost/nas3/bcftools/bcftools
## bcftools view -s sample1,sample2 file.vcf > filtered.vcf
## bcftools view -S sample_file.txt file.vcf > filtered.vcf
## need to generate a sample_file.txt for each of the species but then can filter easily 

prefix="bel"

sonfile=/home/kprovost/nas3/ANGSD_pipeline/${prefix}_vcf_subset_SON.txt 
chifile=/home/kprovost/nas3/ANGSD_pipeline/${prefix}_vcf_subset_CHI.txt 

for filetofilter in */*${prefix}*convert*.vcf.gz; do 
echo $filetofilter
if [ ! -f "${filetofilter}_CHI" ]; then
bcftools view --samples-file $chifile --force-samples --output-type z $filetofilter > ${filetofilter}_CHI
fi
if [ ! -f "${filetofilter}_SON" ]; then
bcftools view --samples-file $sonfile --force-samples --output-type z $filetofilter > ${filetofilter}_SON 
fi
done

for filetofilter in */*/*${prefix}*convert*.vcf.gz; do 
echo $filetofilter
if [ ! -f "${filetofilter}_CHI" ]; then
bcftools view --samples-file $chifile --force-samples --output-type z $filetofilter > ${filetofilter}_CHI 
fi
if [ ! -f "${filetofilter}_SON" ]; then
bcftools view --samples-file $sonfile --force-samples --output-type z $filetofilter > ${filetofilter}_SON
fi
done


for gzfile in *vcf.gz; do gunzip -f $gzfile; done

rm simulate.log

echo "#########################
START
#########################" >> simulate.log

for vcffile in ${PWD}/*vcf; do 



echo "#########################
$vcffile
#########################" >> simulate.log; #done

## first remove extra chrom information
#python3 removeExtraChromInfoFromVCFS.py $vcffile

## second generate the bed files
#python3 generate_relernn_bed_files.py $vcffile.fixedchroms

## need to see if the file is sorted! 

## fix the headers to make sure that the GENOTYPE info gets added
python3 /home/kprovost/nas4/fix_vcf_headers.py $vcffile

## THIS SEEMS TO BE INTRODUCING ISSUES -- RUN A CHECK AT THE END? 
if [ ! -f "${vcffile%.vcf}.sorted.vcf" ]; then
echo "##### SORTING #####" >> simulate.log;
python3 /home/kprovost/nas4/sort_vcfs.py $vcffile
fi
vcffile=${vcffile%.vcf}.sorted.vcf

#SIMULATE="ReLERNN_SIMULATE"
SIMULATE="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_SIMULATE"
TRAIN="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_TRAIN"
#TRAIN="ReLERNN_TRAIN"
PREDICT="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_PREDICT"
#PREDICT="ReLERNN_PREDICT"
BSCORRECT="/home/kprovost/nas4/ReLERNN/ReLERNN/ReLERNN_BSCORRECT"
#BSCORRECT="ReLERNN_BSCORRECT"
#CPU="4"
CPU="1"
#MU="1e-8"
MU="2.21e-9"
RTR="1"
#DIR="./example_output/"
DIR="$PWD"
#VCF="./example.vcf"
VCF="$vcffile"
#GENOME="./genome.bed"
GENOME="$vcffile.bed"
#MASK="./accessibility_mask.bed"
MASK="$vcffile.mask"


## check if file exists 
if [ -f "${vcffile%/vcf}.PREDICT.txt" ]; then
echo "SKIPPING"
else

if [ ! -f "$GENOME" ]; then
echo "##### MAKING BED FILES 1 #####" >> simulate.log;
python3 /home/kprovost/nas4/generate_relernn_bed_files.py $vcffile  >> simulate.log 2>&1
fi
if [ ! -f "$MASK" ]; then
echo "##### MAKING BED FILES 2 #####" >> simulate.log;
python3 /home/kprovost/nas4/generate_relernn_bed_files.py $vcffile  >> simulate.log 2>&1
fi


## for this to work MUST have this header line:
## ##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
# Simulate data
echo "##### SIMULATING #####" >> simulate.log;
${SIMULATE} \
--vcf ${VCF} \
--genome ${GENOME} \
--unphased \
--projectDir ${DIR} \
--assumedMu ${MU} \
--upperRhoThetaRatio ${RTR} \
--forceDiploid \
--nTrain 12800 \
--nVali 2000 \
--nTest 100 \
--nCPU ${CPU} >> simulate.log 2>&1
## removed --phased, added --unphased, removed --mask ${MASK}
## added --forceDiploid to try and get the 1B, 16 chroms to work

# #Train network
echo "##### TRAINING #####" >> simulate.log;
${TRAIN} \
    --projectDir ${DIR} \
    --nEpochs 2 \
    --nValSteps 2 >> simulate.log 2>&1

# #Predict
echo "##### PREDICTING #####" >> simulate.log;
${PREDICT} \
    --vcf ${VCF} \
    --projectDir ${DIR} >> simulate.log 2>&1

# #Parametric Bootstrapping
echo "##### BOOTSTRAPPING #####" >> simulate.log;
${BSCORRECT} \
    --projectDir ${DIR} \
    --nCPU ${CPU} \
    --nSlice 2 \
    --nReps 2 >> simulate.log 2>&1

echo "DONE!"

gzip $vcffile
fi

done;

#cd $mainpath
#done;