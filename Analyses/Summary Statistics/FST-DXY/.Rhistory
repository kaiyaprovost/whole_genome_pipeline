sd(windows_subset$dxy)
start = window$starts
end = window$ends
windows_subset = subset[subset$position>=start & subset$position<=end,]
window_snps_sum = sum(windows_subset$dxy,na.rm=T)
windows_snps_present = nrow(windows_subset)
window_average = window_snps_sum / windowsize
window_average
sqrt(sum(((  windows_subset$dxy   -window_average)^2))/windowsize)
windows_snps_present
window_stdev = sqrt(sum(((  rep(0,windowsize-windows_snps_present)   windows_subset$dxy   -window_average)^2))/windowsize)
c(rep(0,windowsize-windows_snps_present),windows_subset$dxy)
c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
window_average
window_average = window_snps_sum / windowsize
window_average
chrom_average
sqrt(sum(((c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2))/windowsize)
c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2
(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2
(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2)
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize
sqrt(sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize)
window_stdev = sqrt(sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize)
window_stdev
c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2
sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize
sqrt(sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize)
dxylist = c(windows_subset$dxy,rep(0,windowsize-windows_snps_present)
window_stdev = sqrt(sum(c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))-window_average)^2/windowsize)
} else {
window_average = window_snps_sum / length(subset$dxy[subset$position>=start & subset$position<=end])
window_stdev = sqrt(sum(((  windows_subset$dxy   -window_average)^2))/windows_snps_present)
}
average_dxy = sum_dxy/num_snps
#deviation_dxy = sd(this_window$dxy,na.rm=T)
deviation_dxy = sqrt((sum((c(nonzero$dxy,rep(0,numzero))-average_dxy)^2))/num_snps)
}
}
outfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/",spp,"_",dataset,"_SON_Dxy_WINDOWS_chrfix_",num_to_keep,"-",chrom,".txt",sep="")
pngfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/",spp,"_",dataset,"_SON_DxyMEAN_WINDOWS_chrfix_",num_to_keep,"-",chrom,".png",sep="")
sumfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/",spp,"_",dataset,"_SON_DxySUMS_WINDOWS_chrfix_",num_to_keep,"-",chrom,".png",sep="")
sdvfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/",spp,"_",dataset,"_SON_DxySDVS_WINDOWS_chrfix_",num_to_keep,"-",chrom,".png",sep="")
rawfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/",spp,"_",dataset,"_SON_DxyRAW_RAW_chrfix_",num_to_keep,"-",chrom,".png",sep="")
if(num_to_keep != 1){
print("SUBSETTING SCAFFOLDS")
scaff_subset = names(num_on_scaff)[1:num_to_keep]
son_z = only_zero_data[only_zero_data$chromo %in% scaff_subset,]
son_f = only_full_data[only_full_data$chromo %in% scaff_subset,]
matches = match(son_f$chromo,scaff_subset)
son_f$chromnum = matches
son_f = son_f[order(son_f[,"chromnum"], son_f[,"position"] ),]
head(son_f)
summary(son_f$dxy)
summary(son_f$position)
nscaf = (length(scaff_subset))
} else {
nscaf=1
son_z = only_zero_data
son_f = only_full_data
scaff_subset = son_f$chromo[1]
}
closest_snp = min(min(son_f$position),min(son_z$position))
furthest_snp = max(max(son_f$position),max(son_z$position))
## son and chi are exactky the same! yay
print(paste("NUMBER OF SCAFFS TO OUTPUT:",nscaf))
nums = as.numeric(num_on_scaff)
scaf_list = c()
start_list = c()
mean_list = c()
dev_list = c()
snp_list = c()
sum_list = c()
print("writing rawfile")
png(rawfile,width=700,height=350)
#plot(output_dataframe[,"starts"],output_dataframe[,"means"])
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(x=as.numeric(son_f$position),y=as.numeric(son_f$dxy),
col=as.numeric(as.factor(son_f$chromo)),cex=0.2,
main=spp,xlab="Position",ylab="Raw DXY NO ZERO",
ylim=c(0,0.5))
text(x=mean(as.numeric(son_f$position),na.rm=T),
y=0.9,labels=as.character(round(as.numeric(mean(son_f$dxy,na.rm=T)),2)))
dev.off()
print("BEGINNING SCAFFOLDS")
#for (i in 1:100) {
for (i in 1:length(scaff_subset)) {
print(paste(i," of ",nscaf,spp))
scaf = (scaff_subset[i])
number = nums[i]
if(nscaf==1){
this_scaf_f = son_f
this_scaf_z = son_z
} else {
this_scaf_f = son_f[son_f$chromo==scaf,]
this_scaf_z = son_z[son_z$chromo==scaf,]
}
#closest = min(this_scaf$position)
furthest = max(max(this_scaf_f$position),max(this_scaf_z$position))
## get windows
window_ends = seq(windowsize,max(furthest,windowsize),movesize)
window_starts = seq(1,furthest,movesize)
window_starts = window_starts[1:length(window_ends)]
windows = as.data.frame(cbind("starts"=window_starts,"ends"=window_ends))
totwindows=(nrow(windows))
print(totwindows)
for (j in 1:10){
#for (j in 1:nrow(windows)){
window = windows[j,]
if(j %% printstatus == 0) {
print(paste(j,"/",totwindows))
}
start = window$starts
end = window$ends
nonzero = this_scaf_f[this_scaf_f$position>=start & this_scaf_f$position<=end,]
numzero = sum(this_scaf_z$position>=start & this_scaf_z$position<=end)
num_snps = numzero + nrow(nonzero)
sum_dxy = sum(nonzero$dxy,na.rm=T)
#average_dxy = mean(this_window$dxy,na.rm=T)
average_dxy = sum_dxy/num_snps
#deviation_dxy = sd(this_window$dxy,na.rm=T)
deviation_dxy = sqrt((sum((c(nonzero$dxy,rep(0,numzero))-average_dxy)^2))/num_snps)
# scaf_list = c(scaf_list,scaf)
# start_list = c(start_list,start)
# mean_list = c(mean_list,average_dxy)
# dev_list = c(dev_list,deviation_dxy)
# snp_list = c(snp_list,num_snps)
# sum_list = c(sum_list,sum_dxy)
if(j==1 && i==1){
write.table(cbind("scafs","starts","means","stdvs","snps","sums"),outfile,
row.names = F,col.names = F,append=T)
}
write.table(cbind(scaf,start,average_dxy,deviation_dxy,num_snps,sum_dxy),
outfile,
append=T,row.names = F,col.names = F)
}
}
output_dataframe = read.table(outfile)
#head(output_dataframe)
png(pngfile,width=700,height=700)
par(mfrow=c(2,1))
#plot(output_dataframe[,"starts"],output_dataframe[,"means"])
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(output_dataframe[,"means"]),col=as.numeric(as.factor(output_dataframe[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Mean DXY",
ylim=c(0,0.5))
plot(as.numeric(output_dataframe[,"means"]),col=as.numeric(as.factor(output_dataframe[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Mean DXY")
dev.off()
png(sumfile,width=700,height=350)
#plot(output_dataframe[,"starts"],output_dataframe[,"means"])
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(output_dataframe[,"sums"]),col=as.numeric(as.factor(output_dataframe[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Sum DXY")
dev.off()
png(sdvfile,width=700,height=350)
#plot(output_dataframe[,"starts"],output_dataframe[,"means"])
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(output_dataframe[,"stdvs"]),col=as.numeric(as.factor(output_dataframe[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="STDV DXY")
dev.off()
#write.table(output_dataframe,outfile)
}
}
} else {
listsonfiles = list.files(path="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY",
pattern="_4_SON_Dxy_WINDOWS_chrfix_1-ALL.txt",full.names = T)
x <- file.info(listsonfiles)
listsonfiles <- listsonfiles[order(x$size)]
for(sonfile in listsonfiles) {
print(sonfile)
filename=basename(sonfile)
path=dirname(sonfile)
split = strsplit(filename,"_")[[1]]
spp = split[1]
dataset=split[2]
chrom="ALL"
pngfile = paste(path,"/",spp,"_",dataset,"_SON_DxyMEAN_WINDOWS_chrfix_ALL.png",sep="")
sumfile = paste(path,"/",spp,"_",dataset,"_SON_DxySUMS_WINDOWS_chrfix_ALL.png",sep="")
sdvfile = paste(path,"/",spp,"_",dataset,"_SON_DxySDVS_WINDOWS_chrfix_ALL.png",sep="")
if(file.exists(pngfile) && overwrite==F) {
print("SKIPPING")
} else {
print("READING CSV")
sonb = read.csv(sonfile,sep=" ",header=T,row.names = NULL)
sonb=sonb[,c("scafs","starts","means","stdvs","snps","sums")]
sonb=sonb[order(sonb$scafs,sonb$starts),]
png(pngfile,width=700,height=700)
par(mfrow=c(2,1))
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(sonb[,"means"]),col=as.numeric(as.factor(sonb[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Mean DXY",
ylim=c(0,0.5))
plot(as.numeric(sonb[,"means"]),col=as.numeric(as.factor(sonb[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Mean DXY")
dev.off()
png(sumfile,width=700,height=350)
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(sonb[,"sums"]),col=as.numeric(as.factor(sonb[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="Sum DXY")
dev.off()
png(sdvfile,width=700,height=350)
palette(c("red","orange","goldenrod","green","blue","purple",
"cyan","black","brown","magenta"))
plot(as.numeric(sonb[,"stdvs"]),col=as.numeric(as.factor(sonb[,"scafs"])),cex=0.2,
main=spp,xlab="Window (Scaffold)",ylab="STDV DXY")
dev.off()
}
}
}
windows_subset
dxylist = c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
dxylist
length(dxylist)
(dxylist-window_average)^2
sum((dxylist-window_average)^2)
sqrt(sum((dxylist-window_average)^2)/windowsize)
(windows_subset$dxy-window_average)^2
(windows_subset$dxy-window_average)^2)
(windows_subset$dxy-window_average)^2
sum(((windows_subset$dxy-window_average)^2))
sqrt(sum(((windows_subset$dxy-window_average)^2))/windows_snps_present)
sqrt(sum((dxylist-window_average)^2)/windowsize)
window_average = window_snps_sum / windowsize
dxylist = c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
dif = dxylist-window_average
difsq = dif^2
sumdifsq = sum(difsq)
window_stdev = sqrt(sumdifsq/windowsize)
window_stdev
window_average = window_snps_sum / windowsize
dxylist = c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
dif = dxylist-window_average
difsq = dif^2
sumdifsq = sum(difsq)
window_stdev = sqrt(sumdifsq/windowsize)
outfile = paste(sonfile,".windows.dxy.txt",sep="")
outfile
sonfile
#sonfile = paste("/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/ANALYSIS/DXY/textfiles/raw/",spp,"_SON_Dxy_persite_chrfix.txt",sep="")
sppsonfiles = listsonfiles[grep(spp,listsonfiles)]
sppsonfiles
listsonfiles = list.files(path="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/",
pattern="75_SON_Dxy_persite_FIXED",full.names = T)
listsonfiles
sonfile=listsonfiles[1]
outfile = paste(sonfile,".windows.dxy.txt",sep="")
outfile
print("READING CSV")
sonb=data.table::fread(sonfile,sep="\t",
colClasses=c("character","numeric","numeric"),
showProgress=T,data.table = F)
## how many rows are just zero?
justzero=sum(sonb$dxy==0)
percentzero=justzero/nrow(sonb)
print(paste("Proportion that is zero:",round(percentzero,2)))
if(percentzero==0) {
print("WARNING: NEED TO ADD ZEROES WHEN CALCULATING")
## need length of chromosomes
addZeroes=T
} else {
addZeroes=F
}
print("READING IN SCAFFOLDS")
num_on_scaff = rev(sort(table(sonb$chromo)))
totalscaffs = length(num_on_scaff)
print(paste("TOTAL SCAFFS READ:",totalscaffs))
if (totalscaffs != num_to_keep) {
num_to_keep=totalscaffs
}
chromlist
chrom="xzy"
subset = sonb[sonb$chromo==chrom,]
nrow(subset)
number_windows = nrow(windows)
print(paste(chrom,win_i,"/",number_windows))
overwrite=F
specieslist = c("bel",
"bil",
"bru",
"cri",
"cur",
"fla",
"fus",
"mel",
"sin",
"nit"
)
chromlist=c("mtDNA",1,"1A","1B",2:4,"4A",5:28,"Z","LG2","LG5","LGE22")
chromLengths = c(76753,132631505,98848917,1686487,156780119,134338477,73199573,21100058,
65970967,38010788,40056312,26845016,26829339,21327751,22200599,21367209,
19355181,16997682,16163187,74801,12219782,12615983,11868285,15549540,8239338,
5000089,8114938,8747811,3133669,6990484,6667436,6132206,78297685,204071,3391,1340002)
orig_num_to_keep = 40
windowsize = 100000
movesize = 10000
printstatus = 10
listsonfiles = list.files(path="/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/",
pattern="75_SON_Dxy_persite_FIXED",full.names = T)
for(sonfile in listsonfiles) {
num_to_keep = orig_num_to_keep
outfile = paste(sonfile,".windows.dxy.txt",sep="")
print("READING CSV")
sonb=data.table::fread(sonfile,sep="\t",
colClasses=c("character","numeric","numeric"),
showProgress=T,data.table = F)
## how many rows are just zero?
justzero=sum(sonb$dxy==0)
percentzero=justzero/nrow(sonb)
print(paste("Proportion that is zero:",round(percentzero,2)))
if(percentzero==0) {
print("WARNING: NEED TO ADD ZEROES WHEN CALCULATING")
## need length of chromosomes
addZeroes=T
} else {
addZeroes=F
}
print("READING IN SCAFFOLDS")
num_on_scaff = rev(sort(table(sonb$chromo)))
totalscaffs = length(num_on_scaff)
print(paste("TOTAL SCAFFS READ:",totalscaffs))
if (totalscaffs != num_to_keep) {
num_to_keep=totalscaffs
}
## for each chromosome?
for(chr_i in 1:length(chromlist)){
chrom = chromlist[chr_i]
chromlength = chromLengths[chr_i]
subset = sonb[sonb$chromo==chrom,]
if(nrow(subset)>0) {
snps_present = nrow(subset)
snps_sum = sum(subset$dxy)
if(addZeroes==T){
chrom_average = snps_sum / chromlength
} else {
chrom_average = snps_sum / snps_present
}
## start windows
window_ends = seq(windowsize,max(chromlength,windowsize),movesize)
window_starts = seq(1,chromlength,movesize)
window_starts = window_starts[1:length(window_ends)]
windows = as.data.frame(cbind("starts"=window_starts,"ends"=window_ends))
number_windows = nrow(windows)
## loop over windows
for(win_i in 1:nrow(windows)){
window = windows[win_i,]
if(win_i %% printstatus == 0) { print(paste(chrom,win_i,"/",number_windows)) }
start = window$starts
end = window$ends
windows_subset = subset[subset$position>=start & subset$position<=end,]
window_snps_sum = sum(windows_subset$dxy,na.rm=T)
windows_snps_present = nrow(windows_subset)
if(addZeroes==T){
window_average = window_snps_sum / windowsize
dxylist = c(windows_subset$dxy,rep(0,windowsize-windows_snps_present))
dif = dxylist-window_average
difsq = dif^2
sumdifsq = sum(difsq)
window_stdev = sqrt(sumdifsq/windowsize)
} else {
window_average = window_snps_sum / windows_snps_present
dif = windows_subset$dxy-window_average
difsq = dif^2
sumdifsq = sum(difsq)
window_stdev = sqrt(sumdifsq/windows_snps_present)
}
if(chr_i==1 && win_i==1){
write.table(cbind("scafs","starts","means","stdvs","snps","sums"),outfile,
row.names = F,col.names = F,append=T)
}
write.table(cbind(chrom,start,window_average,window_stdev,windows_snps_present,window_snps_sum),
outfile,
append=T,row.names = F,col.names = F)
}
}
}
}
listsonfiles = list.files(path=folder,
pattern="75_SON_Dxy_persite",full.names = T)
folder = "/Users/kprovost/Dropbox (AMNH)/Dissertation/CHAPTER2_GENOMES/"
listsonfiles = list.files(path=folder,
pattern="75_SON_Dxy_persite",full.names = T)
listsonfiles
listsonfiles=listsonfiles[!(grepl("windows.dxy.txt",listsonfiles))]
listsonfiles
sonfile=listsonfiles[1]
sonfile=listsonfiles[2]
sonfile
num_to_keep = orig_num_to_keep
outfile = paste(sonfile,".windows.dxy.txt",sep="")
print("READING CSV")
sonb=data.table::fread(sonfile,sep="\t",
colClasses=c("character","numeric","numeric"),
showProgress=T,data.table = F)
sonb
## check if the names match?
set(chromlist,unique(sonb$chromo))
?set
?union
## check if the names match?
intersect(chromlist,unique(sonb$chromo))
## check if the names match?
overlapchr=intersect(chromlist,unique(sonb$chromo))
overlapchr
## get rid of any that start with NW, PseudoNW, or SS
substr(sonb$chromo)
## get rid of any that start with NW, PseudoNW, or SS
substr(sonb$chromo,1,2)
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
sonb=sonb[prefixes!="NW",]
sonb=sonb[prefixes!="SS",]
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
prefixes
unique(prefixes)
sonb=sonb[prefixes!="NW",]
sonb=sonb[prefixes!="SS",]
sonb
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
unique(prefixes)
sonb[is.na(prefixes),]
sonb=sonb[!(is.na(prefixes)),]
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
prefixes
unique(prefixes)
prefixes=substr(sonb$chromo,1,8)
prefixes
sonb=sonb[prefixes!="PseudoNW",]
prefixes=substr(sonb$chromo,1,8)
unique(prefixes)
x=sonb$chromo[1]
x
y=strsplit(x,"_")[[1]]
y
z=y[length(y)]
z
## now get rid of the prefix altogether
newchromo=sapply(sonb$chromo,FUN=function(x){
y=strsplit(x,"_")[[1]]
z=y[length(y)]
return(z)
})
## now get rid of the prefix altogether
newchromo=sapply(unique(sonb$chromo),FUN=function(x){
y=strsplit(x,"_")[[1]]
z=y[length(y)]
return(z)
})
newchromo
oldchrom = unique(sonb$chromo)
oldchrom
## now get rid of the prefix altogether
oldchromo = unique(sonb$chromo)
newchromo=sapply(oldchrom,FUN=function(x){
y=strsplit(x,"_")[[1]]
z=y[length(y)]
return(z)
})
oldchr = oldchromo[i]
newchr = newchromo[i]
oldchr
newchr
sonb$chromo[sonb$chromo==oldchr]
as.character(newchr)
## check if the names match?
overlapchr=intersect(chromlist,unique(sonb$chromo))
overlapchr
if(length(overlapchr)==0) {
## get rid of any that start with NW, PseudoNW, or SS
prefixes=substr(sonb$chromo,1,2)
sonb=sonb[prefixes!="NW",]
sonb=sonb[prefixes!="SS",]
sonb=sonb[!(is.na(prefixes)),]
prefixes=substr(sonb$chromo,1,8)
sonb=sonb[prefixes!="PseudoNW",]
## now get rid of the prefix altogether
oldchromo = unique(sonb$chromo)
newchromo=sapply(oldchrom,FUN=function(x){
y=strsplit(x,"_")[[1]]
z=y[length(y)]
return(z)
})
for(i in 1:length(newchromo)){
print(i)
oldchr = oldchromo[i]
newchr = newchromo[i]
sonb$chromo[sonb$chromo==oldchr] = as.character(newchr)
}
}
write.table(sonb,paste(sonfile,"_RFIXED.txt"),
row.names = F,col.names = T,append=T)
sonfile
write.table(sonb,paste(sonfile,"_RFIXED.txt",sep=""),
row.names = F,col.names = T,append=T,quote = F)
write.table(sonb,paste(sonfile,"_RFIXED.txt",sep=""),
row.names = F,col.names = T,append=F,quote = F)
